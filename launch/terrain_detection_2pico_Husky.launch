<launch>

    <arg name="vehicle" default="H01"/>
    <node pkg="nodelet" type="nodelet" name="standalone_nodelet" args="manager" output="screen" />

    <!-- Downsample / crop data -->
    <node pkg="nodelet" type="nodelet" name="terrain_right_vg_x" args="load pcl/VoxelGrid standalone_nodelet" respawn="true" >
        <remap from="~input" to="pico_flexx_right/points"/>
        <remap from="~voxel_grid/output" to="terrain_right_vg_x/output"/>
        <rosparam>
            filter_field_name: z <!-- Depth(+) -->
            filter_limit_min:  0.1
            filter_limit_max:  2.5
            filter_limit_negative: False
            leaf_size: 0.05
        </rosparam>
    </node>

    <node pkg="nodelet" type="nodelet" name="terrain_left_vg_x" args="load pcl/VoxelGrid standalone_nodelet" respawn="true" >
        <remap from="~input" to="pico_flexx_left/points"/>
        <remap from="~voxel_grid/output" to="terrain_left_vg_x/output"/>
        <rosparam>
            filter_field_name: z <!-- Depth(+) -->
            filter_limit_min:  0.1
            filter_limit_max:  2.5
            filter_limit_negative: False
            leaf_size: 0.05
        </rosparam>
    </node>


    <node pkg="nodelet" type="nodelet" name="terrain_right_sor" args="load pcl/StatisticalOutlierRemoval standalone_nodelet" respawn="true" >
        <remap from="~input" to="terrain_right_vg_x/output"/>
        <rosparam>
            mean_k: 50
            stddev:  1.0
            negative:  False
        </rosparam>
    </node>

    <node pkg="nodelet" type="nodelet" name="terrain_left_sor" args="load pcl/StatisticalOutlierRemoval standalone_nodelet" respawn="true" >
        <remap from="~input" to="terrain_left_vg_x/output"/>
        <rosparam>
            mean_k: 50
            stddev:  1.0
            negative:  False
        </rosparam>
    </node>

  <!-- NOTE: The following warning will appear if SOR filter outputs empty PCL: [pcl::KdTreeFLANN::setInputCloud] Cannot create a KDTree with an empty input cloud! -->

    <!-- Terrain detection: Right+Left PicoFlexx -->
    <node pkg="nodelet" type="nodelet" name="terrain_detection" args="load terrain/terrain_detection_nodelet standalone_nodelet" respawn="true">
        <remap from="pcl_in_1"      to="terrain_right_sor/output" />
        <remap from="pcl_in_2"      to="terrain_left_sor/output" />
        <remap from="~pcl_out_1"    to="~pcl_out_right" />
        <remap from="~pcl_out_2"    to="~pcl_out_left" />
        <rosparam>
            transform_pcl_yaw_1:     -3.1415  <!-- r_pf_y -->
            transform_pcl_pitch_1:    1.0473  <!-- r_pf_p -->
            transform_pcl_roll_1:    -2.7315  <!-- r_pf_r -->
            transform_pcl_yaw_2:      3.1415  <!-- l_pf_y -->
            transform_pcl_pitch_2:    1.0473  <!-- l_pf_p -->
            transform_pcl_roll_2:     2.7315  <!-- l_pf_r -->
            normal_radius:            0.15  <!--  0.15 for Husky -->  <!--  0.10 for Track Bot -->
            normal_x_LT_threshold:   -0.50
            normal_x_GT_threshold:    0.50
            normal_y_LT_threshold:   -0.50
            normal_y_GT_threshold:    0.50
            normal_z_LT_threshold:    0.866
            normal_z_GT_threshold:    1.00
            ror_radius:               0.10
            ror_min_neighbors:           7
            # Set the spatial locator. Possible values are: 0 (ANN), 1 (FLANN), 2 (organized)
            spatial_locator: 0
        </rosparam>
    </node>

    <!-- PCL to Laserscan Nodelet -->

    <node pkg="nodelet" type="nodelet" name="terrain_right_pcl2laser" args="load pointcloud_to_laserscan/pointcloud_to_laserscan_nodelet standalone_nodelet" >
        <remap from="cloud_in" to="terrain_detection/pcl_out_right"/>
        <remap from="scan" to="terrain_detection/scan_out_right"/>
        <param name="target_frame" type="str" value="$(arg vehicle)/base_link" />
        <param name="min_height" type="double" value="-10.0" />
        <param name="max_height" type="double" value="10.0" />
        <param name="min_range" type="double" value="0" />
        <param name="max_range" type="double" value="1000" />
        <param name="angle_min" type="double" value="-0.78539816339" /> <!-- 1.1780972451 -->
        <param name="angle_max" type="double" value="0.0" /> <!-- 1.96349540849 -->
        <param name="angle_increment" type="double" value="0.00873" />
        <param name="use_inf" type="boolean" value="true" />
    </node>

    <node pkg="nodelet" type="nodelet" name="terrain_left_pcl2laser" args="load pointcloud_to_laserscan/pointcloud_to_laserscan_nodelet standalone_nodelet" >
        <remap from="cloud_in" to="terrain_detection/pcl_out_left"/>
        <remap from="scan" to="terrain_detection/scan_out_left"/>
        <param name="target_frame" type="str" value="$(arg vehicle)/base_link" />
        <param name="min_height" type="double" value="-10.0" />
        <param name="max_height" type="double" value="10.0" />
        <param name="min_range" type="double" value="0" />
        <param name="max_range" type="double" value="1000" />
        <param name="angle_min" type="double" value="0.0" /> <!-- 1.1780972451 -->
        <param name="angle_max" type="double" value="0.78539816339" /> <!-- 1.96349540849 -->
        <param name="angle_increment" type="double" value="0.00873" />
        <param name="use_inf" type="boolean" value="true" />
    </node>

    <node pkg="terrain_detection" name="concat_laserscans" type="concat_laserscans" respawn="true" output="screen">
      <param name="publish_rate"         value="10"/>
      <param name="num_scan_points"      value="90"/>
      <param name="left_scan_limit"      value="-0.785"/>
      <param name="right_scan_limit"     value="0.785"/>
      <param name="scan_timeout_s"       value=".25"/>
      <param name="vehicle_name"         value="$(arg vehicle)"/>
    </node>

    <node pkg="terrain_detection" name="laserscan2pcl" type="laserscan2pcl" respawn="true" output="screen">
      <param name="vehicle_name" value="$(arg vehicle)/base_link"/>
      <remap from="terrain_detection/laserscanPCL" to="octomap_in"/>
    </node>

</launch>
